# import * from "../generated/prisma.graphql"

# directive @hasRole(roles: [Role!]) on FIELD_DEFINITION | OBJECT # schema
directive @hasRole(roles: [Role!]) on FIELD | FIELD_DEFINITION | MUTATION | QUERY # legacy
directive @isAuthenticated on FIELD_DEFINITION | OBJECT
directive @isOwner(resource: String!, id: String = "id") on FIELD | FIELD_DEFINITION | MUTATION | QUERY

type Query @isAuthenticated {
  dashboard(id: ID!): Dashboard
  dashboards(where: DashboardWhereInput): [Dashboard!]!
  func(id: ID!): Func
  funcs(where: FuncWhereInput): [Func!]!
  graph(id: ID!): Graph
  graphs(where: GraphWhereInput): [Graph!]!
  signedInUser: User
  user(id: ID!): User
  users(where: UserWhereInput): [User!]!
}

type Mutation {
  createDashboard(data: DashboardUpdateInput!): Dashboard! @isAuthenticated
  createDataSource(lineGeneratorId: ID!, data: FunctionContextUpdateInput!): FunctionContext! @isOwner(resource: "LineGenerator", id: "lineGeneratorId") @isAuthenticated
  createFunc(data: FuncUpdateInput!): Func! @hasRole(roles: [ADMIN, SUPER_ADMIN]) @isAuthenticated
  createFuncFromUrl(url: String!): Func! @hasRole(roles: [ADMIN, SUPER_ADMIN]) @isAuthenticated
  createGraph(dashboardId: ID!, data: GraphUpdateInput!): Graph! @isOwner(resource: "Dashboard", id: "dashboardId") @isAuthenticated
  createHook(lineGeneratorId: ID!, data: FunctionContextUpdateInput!): FunctionContext! @isOwner(resource: "LineGenerator", id: "lineGeneratorId") @isAuthenticated
  createLineGenerator(graphId: ID!, data: LineGeneratorUpdateInput!): LineGenerator! @isOwner(resource: "Graph", id: "graphId") @isAuthenticated
  deleteDashboard(id: ID!): Dashboard @isOwner(resource: "Dashboard") @isAuthenticated
  deleteFunc(id: ID!): Func @hasRole(roles: [ADMIN, SUPER_ADMIN]) @isAuthenticated
  deleteFunctionContext(id: ID!): FunctionContext @isOwner(resource: "FunctionContext") @isAuthenticated
  deleteGraph(id: ID!): Graph @isOwner(resource: "Graph") @isAuthenticated
  deleteLineGenerator(id: ID!): LineGenerator @isOwner(resource: "LineGenerator") @isAuthenticated
  signIn(email: String!, password: String!): AuthPayload
  signUp(email: String!, password: String!, data: UserUpdateInput!): AuthPayload
  updateDashboard(id: ID!, data: DashboardUpdateInput!): Dashboard @isOwner(resource: "Dashboard") @isAuthenticated
  updateFunc(id: ID!, data: FuncUpdateInput!): Func @hasRole(roles: [ADMIN, SUPER_ADMIN]) @isAuthenticated
  updateFunctionContext(id: ID!, data: FunctionContextUpdateInput!): FunctionContext @isOwner(resource: "FunctionContext") @isAuthenticated
  updateGraph(id: ID!, data: GraphUpdateInput!): Graph @isOwner(resource: "Graph") @isAuthenticated
  updateLineGenerator(id: ID!, data: LineGeneratorUpdateInput!): LineGenerator @isOwner(resource: "LineGenerator") @isAuthenticated
}

type Subscription {
  messageLogged: Log,
  pointCreated: Point
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  createdAt: DateTime!
  dashboards: [Dashboard!]
  displayName: String!
  email: String!
  funcs: [Func!]
  functionContexts: [FunctionContext!]
  graphs: [Graph!]
  lineGenerators: [LineGenerator!]
  password: String! @hasRole(roles: [SUPER_ADMIN])
  role: Role!
  settings: Settings
  updatedAt: DateTime!
}

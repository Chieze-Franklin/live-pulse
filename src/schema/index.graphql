# import * from "../generated/prisma.graphql"

# directive @hasRole(roles: [Role!]) on FIELD_DEFINITION | OBJECT # schema
directive @hasRole(roles: [Role!]) on FIELD | FIELD_DEFINITION | MUTATION | QUERY # legacy
directive @isAuthenticated on FIELD_DEFINITION | OBJECT
directive @isOwner(resource: String!, id: String = "id") on FIELD | FIELD_DEFINITION | MUTATION | QUERY

type Query @isAuthenticated {
  dashboard(id: ID!): Dashboard
  dashboards(where: DashboardWhereInput): [Dashboard!]!
  dataSource(id: ID!): DataSource
  dataSources(where: DataSourceWhereInput): [DataSource!]!
  entity(id: ID!): Entity
  entities(where: EntityWhereInput): [Entity!]!
  graph(id: ID!): Graph
  graphs(where: GraphWhereInput): [Graph!]!
  line(id: ID!): Line
  lines(where: LineWhereInput): [Line]!
  lineGenerator(id: ID!): LineGenerator
  lineGenerators(where: LineGeneratorWhereInput): [LineGenerator]!
  point(id: ID!): Point
  points(where: PointWhereInput): [Point]!
  signedInUser: User
  user(id: ID!): User
  users(where: UserWhereInput): [User!]!
}

type Mutation {
  createDashboard(data: DashboardUpdateInput!): Dashboard! @isAuthenticated
  createDataSource(data: DataSourceCreateInput!): DataSource! @hasRole(roles: [ADMIN, SUPER_ADMIN]) @isAuthenticated
  createEntity(data: EntityCreateInput!): Entity! @isAuthenticated
  createGraph(dashboardId: ID!, data: GraphUpdateInput!): Graph! @isOwner(resource: "Dashboard", id: "dashboardId") @isAuthenticated
  createLineGenerator(graphId: ID!, data: LineGeneratorUpdateInput!): LineGenerator! @isOwner(resource: "Graph", id: "graphId") @isAuthenticated
  deleteDashboard(id: ID!): Dashboard @isOwner(resource: "Dashboard") @isAuthenticated
  deleteDataSource(id: ID!): DataSource @hasRole(roles: [ADMIN, SUPER_ADMIN]) @isAuthenticated
  deleteEntity(id: ID!): Entity @isOwner(resource: "Entity") @isAuthenticated
  deleteGraph(id: ID!): Graph @isOwner(resource: "Graph") @isAuthenticated
  deleteLineGenerator(id: ID!): LineGenerator @isOwner(resource: "LineGenerator") @isAuthenticated
  signIn(email: String!, password: String!): AuthPayload
  signUp(email: String!, password: String!, data: UserUpdateInput!): AuthPayload
  updateDashboard(id: ID!, data: DashboardUpdateInput!): Dashboard @isOwner(resource: "Dashboard") @isAuthenticated
  updateDataSource(id: ID!, data: DataSourceUpdateInput!): DataSource @hasRole(roles: [ADMIN, SUPER_ADMIN]) @isAuthenticated
  updateEntity(id: ID!, data: EntityUpdateInput!): Entity @isOwner(resource: "Entity") @isAuthenticated
  updateGraph(id: ID!, data: GraphUpdateInput!): Graph @isOwner(resource: "Graph") @isAuthenticated
  updateLineGenerator(id: ID!, data: LineGeneratorUpdateInput!): LineGenerator @isOwner(resource: "LineGenerator") @isAuthenticated
}

type Subscription {
  createdDashboard: Dashboard
  # createdPoint: Point
}

type AuthPayload {
  token: String
  user: User
}

type User {
  createdAt: DateTime!
  dashboards: [Dashboard!]!
  dataSources: [DataSource!]!
  displayName: String!
  email: String!
  entities: [Entity!]!
  graphs: [Graph!]!
  lineGenerators: [LineGenerator!]!
  password: String! @hasRole(roles: [SUPER_ADMIN])
  role: Role!
  updatedAt: DateTime!
}

module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateDashboard {
  count: Int!
}

type AggregateFunc {
  count: Int!
}

type AggregateFunctionContext {
  count: Int!
}

type AggregateGraph {
  count: Int!
}

type AggregateLine {
  count: Int!
}

type AggregateLineGenerator {
  count: Int!
}

type AggregateLog {
  count: Int!
}

type AggregatePoint {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Dashboard {
  id: ID!
  createdAt: DateTime!
  createdBy: User!
  graphs(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Graph!]
  icon: String
  publicUrl: String
  title: String!
  updatedAt: DateTime!
  updateInterval: Int!
  variables: Json
}

type DashboardConnection {
  pageInfo: PageInfo!
  edges: [DashboardEdge]!
  aggregate: AggregateDashboard!
}

input DashboardCreateInput {
  id: ID
  createdBy: UserCreateOneWithoutDashboardsInput!
  graphs: GraphCreateManyWithoutDashboardInput
  icon: String
  publicUrl: String
  title: String!
  updateInterval: Int
  variables: Json
}

input DashboardCreateManyWithoutCreatedByInput {
  create: [DashboardCreateWithoutCreatedByInput!]
  connect: [DashboardWhereUniqueInput!]
}

input DashboardCreateOneWithoutGraphsInput {
  create: DashboardCreateWithoutGraphsInput
  connect: DashboardWhereUniqueInput
}

input DashboardCreateWithoutCreatedByInput {
  id: ID
  graphs: GraphCreateManyWithoutDashboardInput
  icon: String
  publicUrl: String
  title: String!
  updateInterval: Int
  variables: Json
}

input DashboardCreateWithoutGraphsInput {
  id: ID
  createdBy: UserCreateOneWithoutDashboardsInput!
  icon: String
  publicUrl: String
  title: String!
  updateInterval: Int
  variables: Json
}

type DashboardEdge {
  node: Dashboard!
  cursor: String!
}

enum DashboardOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  icon_ASC
  icon_DESC
  publicUrl_ASC
  publicUrl_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  updateInterval_ASC
  updateInterval_DESC
  variables_ASC
  variables_DESC
}

type DashboardPreviousValues {
  id: ID!
  createdAt: DateTime!
  icon: String
  publicUrl: String
  title: String!
  updatedAt: DateTime!
  updateInterval: Int!
  variables: Json
}

input DashboardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  publicUrl: String
  publicUrl_not: String
  publicUrl_in: [String!]
  publicUrl_not_in: [String!]
  publicUrl_lt: String
  publicUrl_lte: String
  publicUrl_gt: String
  publicUrl_gte: String
  publicUrl_contains: String
  publicUrl_not_contains: String
  publicUrl_starts_with: String
  publicUrl_not_starts_with: String
  publicUrl_ends_with: String
  publicUrl_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updateInterval: Int
  updateInterval_not: Int
  updateInterval_in: [Int!]
  updateInterval_not_in: [Int!]
  updateInterval_lt: Int
  updateInterval_lte: Int
  updateInterval_gt: Int
  updateInterval_gte: Int
  AND: [DashboardScalarWhereInput!]
  OR: [DashboardScalarWhereInput!]
  NOT: [DashboardScalarWhereInput!]
}

type DashboardSubscriptionPayload {
  mutation: MutationType!
  node: Dashboard
  updatedFields: [String!]
  previousValues: DashboardPreviousValues
}

input DashboardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DashboardWhereInput
  AND: [DashboardSubscriptionWhereInput!]
  OR: [DashboardSubscriptionWhereInput!]
  NOT: [DashboardSubscriptionWhereInput!]
}

input DashboardUpdateInput {
  createdBy: UserUpdateOneRequiredWithoutDashboardsInput
  graphs: GraphUpdateManyWithoutDashboardInput
  icon: String
  publicUrl: String
  title: String
  updateInterval: Int
  variables: Json
}

input DashboardUpdateManyDataInput {
  icon: String
  publicUrl: String
  title: String
  updateInterval: Int
  variables: Json
}

input DashboardUpdateManyMutationInput {
  icon: String
  publicUrl: String
  title: String
  updateInterval: Int
  variables: Json
}

input DashboardUpdateManyWithoutCreatedByInput {
  create: [DashboardCreateWithoutCreatedByInput!]
  delete: [DashboardWhereUniqueInput!]
  connect: [DashboardWhereUniqueInput!]
  set: [DashboardWhereUniqueInput!]
  disconnect: [DashboardWhereUniqueInput!]
  update: [DashboardUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [DashboardUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [DashboardScalarWhereInput!]
  updateMany: [DashboardUpdateManyWithWhereNestedInput!]
}

input DashboardUpdateManyWithWhereNestedInput {
  where: DashboardScalarWhereInput!
  data: DashboardUpdateManyDataInput!
}

input DashboardUpdateOneRequiredWithoutGraphsInput {
  create: DashboardCreateWithoutGraphsInput
  update: DashboardUpdateWithoutGraphsDataInput
  upsert: DashboardUpsertWithoutGraphsInput
  connect: DashboardWhereUniqueInput
}

input DashboardUpdateWithoutCreatedByDataInput {
  graphs: GraphUpdateManyWithoutDashboardInput
  icon: String
  publicUrl: String
  title: String
  updateInterval: Int
  variables: Json
}

input DashboardUpdateWithoutGraphsDataInput {
  createdBy: UserUpdateOneRequiredWithoutDashboardsInput
  icon: String
  publicUrl: String
  title: String
  updateInterval: Int
  variables: Json
}

input DashboardUpdateWithWhereUniqueWithoutCreatedByInput {
  where: DashboardWhereUniqueInput!
  data: DashboardUpdateWithoutCreatedByDataInput!
}

input DashboardUpsertWithoutGraphsInput {
  update: DashboardUpdateWithoutGraphsDataInput!
  create: DashboardCreateWithoutGraphsInput!
}

input DashboardUpsertWithWhereUniqueWithoutCreatedByInput {
  where: DashboardWhereUniqueInput!
  update: DashboardUpdateWithoutCreatedByDataInput!
  create: DashboardCreateWithoutCreatedByInput!
}

input DashboardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  graphs_every: GraphWhereInput
  graphs_some: GraphWhereInput
  graphs_none: GraphWhereInput
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  publicUrl: String
  publicUrl_not: String
  publicUrl_in: [String!]
  publicUrl_not_in: [String!]
  publicUrl_lt: String
  publicUrl_lte: String
  publicUrl_gt: String
  publicUrl_gte: String
  publicUrl_contains: String
  publicUrl_not_contains: String
  publicUrl_starts_with: String
  publicUrl_not_starts_with: String
  publicUrl_ends_with: String
  publicUrl_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updateInterval: Int
  updateInterval_not: Int
  updateInterval_in: [Int!]
  updateInterval_not_in: [Int!]
  updateInterval_lt: Int
  updateInterval_lte: Int
  updateInterval_gt: Int
  updateInterval_gte: Int
  AND: [DashboardWhereInput!]
  OR: [DashboardWhereInput!]
  NOT: [DashboardWhereInput!]
}

input DashboardWhereUniqueInput {
  id: ID
}

scalar DateTime

type Func {
  id: ID!
  author: String
  createdAt: DateTime!
  createdBy: User
  contexts(where: FunctionContextWhereInput, orderBy: FunctionContextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FunctionContext!]
  description: String
  meta: Json
  name: String!
  options: Json
  optionsSchema: Json
  parametersSchema: Json
  source: String!
  type: FuncType!
  updatedAt: DateTime!
}

type FuncConnection {
  pageInfo: PageInfo!
  edges: [FuncEdge]!
  aggregate: AggregateFunc!
}

input FuncCreateInput {
  id: ID
  author: String
  createdBy: UserCreateOneWithoutFuncsInput
  contexts: FunctionContextCreateManyWithoutFuncInput
  description: String
  meta: Json
  name: String!
  options: Json
  optionsSchema: Json
  parametersSchema: Json
  source: String!
  type: FuncType
}

input FuncCreateManyWithoutCreatedByInput {
  create: [FuncCreateWithoutCreatedByInput!]
  connect: [FuncWhereUniqueInput!]
}

input FuncCreateOneWithoutContextsInput {
  create: FuncCreateWithoutContextsInput
  connect: FuncWhereUniqueInput
}

input FuncCreateWithoutContextsInput {
  id: ID
  author: String
  createdBy: UserCreateOneWithoutFuncsInput
  description: String
  meta: Json
  name: String!
  options: Json
  optionsSchema: Json
  parametersSchema: Json
  source: String!
  type: FuncType
}

input FuncCreateWithoutCreatedByInput {
  id: ID
  author: String
  contexts: FunctionContextCreateManyWithoutFuncInput
  description: String
  meta: Json
  name: String!
  options: Json
  optionsSchema: Json
  parametersSchema: Json
  source: String!
  type: FuncType
}

type FuncEdge {
  node: Func!
  cursor: String!
}

enum FuncOrderByInput {
  id_ASC
  id_DESC
  author_ASC
  author_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  meta_ASC
  meta_DESC
  name_ASC
  name_DESC
  options_ASC
  options_DESC
  optionsSchema_ASC
  optionsSchema_DESC
  parametersSchema_ASC
  parametersSchema_DESC
  source_ASC
  source_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FuncPreviousValues {
  id: ID!
  author: String
  createdAt: DateTime!
  description: String
  meta: Json
  name: String!
  options: Json
  optionsSchema: Json
  parametersSchema: Json
  source: String!
  type: FuncType!
  updatedAt: DateTime!
}

input FuncScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  type: FuncType
  type_not: FuncType
  type_in: [FuncType!]
  type_not_in: [FuncType!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FuncScalarWhereInput!]
  OR: [FuncScalarWhereInput!]
  NOT: [FuncScalarWhereInput!]
}

type FuncSubscriptionPayload {
  mutation: MutationType!
  node: Func
  updatedFields: [String!]
  previousValues: FuncPreviousValues
}

input FuncSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FuncWhereInput
  AND: [FuncSubscriptionWhereInput!]
  OR: [FuncSubscriptionWhereInput!]
  NOT: [FuncSubscriptionWhereInput!]
}

type FunctionContext {
  id: ID!
  createdAt: DateTime!
  createdBy: User!
  func: Func
  hookedTo: LineGenerator
  lineGenerator: LineGenerator
  logs(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Log!]
  updatedAt: DateTime!
  variables: Json
}

type FunctionContextConnection {
  pageInfo: PageInfo!
  edges: [FunctionContextEdge]!
  aggregate: AggregateFunctionContext!
}

input FunctionContextCreateInput {
  id: ID
  createdBy: UserCreateOneWithoutFunctionContextsInput!
  func: FuncCreateOneWithoutContextsInput
  hookedTo: LineGeneratorCreateOneWithoutHooksInput
  lineGenerator: LineGeneratorCreateOneWithoutDataSourceInput
  logs: LogCreateManyWithoutContextInput
  variables: Json
}

input FunctionContextCreateManyWithoutCreatedByInput {
  create: [FunctionContextCreateWithoutCreatedByInput!]
  connect: [FunctionContextWhereUniqueInput!]
}

input FunctionContextCreateManyWithoutFuncInput {
  create: [FunctionContextCreateWithoutFuncInput!]
  connect: [FunctionContextWhereUniqueInput!]
}

input FunctionContextCreateManyWithoutHookedToInput {
  create: [FunctionContextCreateWithoutHookedToInput!]
  connect: [FunctionContextWhereUniqueInput!]
}

input FunctionContextCreateOneWithoutLineGeneratorInput {
  create: FunctionContextCreateWithoutLineGeneratorInput
  connect: FunctionContextWhereUniqueInput
}

input FunctionContextCreateOneWithoutLogsInput {
  create: FunctionContextCreateWithoutLogsInput
  connect: FunctionContextWhereUniqueInput
}

input FunctionContextCreateWithoutCreatedByInput {
  id: ID
  func: FuncCreateOneWithoutContextsInput
  hookedTo: LineGeneratorCreateOneWithoutHooksInput
  lineGenerator: LineGeneratorCreateOneWithoutDataSourceInput
  logs: LogCreateManyWithoutContextInput
  variables: Json
}

input FunctionContextCreateWithoutFuncInput {
  id: ID
  createdBy: UserCreateOneWithoutFunctionContextsInput!
  hookedTo: LineGeneratorCreateOneWithoutHooksInput
  lineGenerator: LineGeneratorCreateOneWithoutDataSourceInput
  logs: LogCreateManyWithoutContextInput
  variables: Json
}

input FunctionContextCreateWithoutHookedToInput {
  id: ID
  createdBy: UserCreateOneWithoutFunctionContextsInput!
  func: FuncCreateOneWithoutContextsInput
  lineGenerator: LineGeneratorCreateOneWithoutDataSourceInput
  logs: LogCreateManyWithoutContextInput
  variables: Json
}

input FunctionContextCreateWithoutLineGeneratorInput {
  id: ID
  createdBy: UserCreateOneWithoutFunctionContextsInput!
  func: FuncCreateOneWithoutContextsInput
  hookedTo: LineGeneratorCreateOneWithoutHooksInput
  logs: LogCreateManyWithoutContextInput
  variables: Json
}

input FunctionContextCreateWithoutLogsInput {
  id: ID
  createdBy: UserCreateOneWithoutFunctionContextsInput!
  func: FuncCreateOneWithoutContextsInput
  hookedTo: LineGeneratorCreateOneWithoutHooksInput
  lineGenerator: LineGeneratorCreateOneWithoutDataSourceInput
  variables: Json
}

type FunctionContextEdge {
  node: FunctionContext!
  cursor: String!
}

enum FunctionContextOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  variables_ASC
  variables_DESC
}

type FunctionContextPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  variables: Json
}

input FunctionContextScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FunctionContextScalarWhereInput!]
  OR: [FunctionContextScalarWhereInput!]
  NOT: [FunctionContextScalarWhereInput!]
}

type FunctionContextSubscriptionPayload {
  mutation: MutationType!
  node: FunctionContext
  updatedFields: [String!]
  previousValues: FunctionContextPreviousValues
}

input FunctionContextSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FunctionContextWhereInput
  AND: [FunctionContextSubscriptionWhereInput!]
  OR: [FunctionContextSubscriptionWhereInput!]
  NOT: [FunctionContextSubscriptionWhereInput!]
}

input FunctionContextUpdateInput {
  createdBy: UserUpdateOneRequiredWithoutFunctionContextsInput
  func: FuncUpdateOneWithoutContextsInput
  hookedTo: LineGeneratorUpdateOneWithoutHooksInput
  lineGenerator: LineGeneratorUpdateOneWithoutDataSourceInput
  logs: LogUpdateManyWithoutContextInput
  variables: Json
}

input FunctionContextUpdateManyDataInput {
  variables: Json
}

input FunctionContextUpdateManyMutationInput {
  variables: Json
}

input FunctionContextUpdateManyWithoutCreatedByInput {
  create: [FunctionContextCreateWithoutCreatedByInput!]
  delete: [FunctionContextWhereUniqueInput!]
  connect: [FunctionContextWhereUniqueInput!]
  set: [FunctionContextWhereUniqueInput!]
  disconnect: [FunctionContextWhereUniqueInput!]
  update: [FunctionContextUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [FunctionContextUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [FunctionContextScalarWhereInput!]
  updateMany: [FunctionContextUpdateManyWithWhereNestedInput!]
}

input FunctionContextUpdateManyWithoutFuncInput {
  create: [FunctionContextCreateWithoutFuncInput!]
  delete: [FunctionContextWhereUniqueInput!]
  connect: [FunctionContextWhereUniqueInput!]
  set: [FunctionContextWhereUniqueInput!]
  disconnect: [FunctionContextWhereUniqueInput!]
  update: [FunctionContextUpdateWithWhereUniqueWithoutFuncInput!]
  upsert: [FunctionContextUpsertWithWhereUniqueWithoutFuncInput!]
  deleteMany: [FunctionContextScalarWhereInput!]
  updateMany: [FunctionContextUpdateManyWithWhereNestedInput!]
}

input FunctionContextUpdateManyWithoutHookedToInput {
  create: [FunctionContextCreateWithoutHookedToInput!]
  delete: [FunctionContextWhereUniqueInput!]
  connect: [FunctionContextWhereUniqueInput!]
  set: [FunctionContextWhereUniqueInput!]
  disconnect: [FunctionContextWhereUniqueInput!]
  update: [FunctionContextUpdateWithWhereUniqueWithoutHookedToInput!]
  upsert: [FunctionContextUpsertWithWhereUniqueWithoutHookedToInput!]
  deleteMany: [FunctionContextScalarWhereInput!]
  updateMany: [FunctionContextUpdateManyWithWhereNestedInput!]
}

input FunctionContextUpdateManyWithWhereNestedInput {
  where: FunctionContextScalarWhereInput!
  data: FunctionContextUpdateManyDataInput!
}

input FunctionContextUpdateOneRequiredWithoutLogsInput {
  create: FunctionContextCreateWithoutLogsInput
  update: FunctionContextUpdateWithoutLogsDataInput
  upsert: FunctionContextUpsertWithoutLogsInput
  connect: FunctionContextWhereUniqueInput
}

input FunctionContextUpdateOneWithoutLineGeneratorInput {
  create: FunctionContextCreateWithoutLineGeneratorInput
  update: FunctionContextUpdateWithoutLineGeneratorDataInput
  upsert: FunctionContextUpsertWithoutLineGeneratorInput
  delete: Boolean
  disconnect: Boolean
  connect: FunctionContextWhereUniqueInput
}

input FunctionContextUpdateWithoutCreatedByDataInput {
  func: FuncUpdateOneWithoutContextsInput
  hookedTo: LineGeneratorUpdateOneWithoutHooksInput
  lineGenerator: LineGeneratorUpdateOneWithoutDataSourceInput
  logs: LogUpdateManyWithoutContextInput
  variables: Json
}

input FunctionContextUpdateWithoutFuncDataInput {
  createdBy: UserUpdateOneRequiredWithoutFunctionContextsInput
  hookedTo: LineGeneratorUpdateOneWithoutHooksInput
  lineGenerator: LineGeneratorUpdateOneWithoutDataSourceInput
  logs: LogUpdateManyWithoutContextInput
  variables: Json
}

input FunctionContextUpdateWithoutHookedToDataInput {
  createdBy: UserUpdateOneRequiredWithoutFunctionContextsInput
  func: FuncUpdateOneWithoutContextsInput
  lineGenerator: LineGeneratorUpdateOneWithoutDataSourceInput
  logs: LogUpdateManyWithoutContextInput
  variables: Json
}

input FunctionContextUpdateWithoutLineGeneratorDataInput {
  createdBy: UserUpdateOneRequiredWithoutFunctionContextsInput
  func: FuncUpdateOneWithoutContextsInput
  hookedTo: LineGeneratorUpdateOneWithoutHooksInput
  logs: LogUpdateManyWithoutContextInput
  variables: Json
}

input FunctionContextUpdateWithoutLogsDataInput {
  createdBy: UserUpdateOneRequiredWithoutFunctionContextsInput
  func: FuncUpdateOneWithoutContextsInput
  hookedTo: LineGeneratorUpdateOneWithoutHooksInput
  lineGenerator: LineGeneratorUpdateOneWithoutDataSourceInput
  variables: Json
}

input FunctionContextUpdateWithWhereUniqueWithoutCreatedByInput {
  where: FunctionContextWhereUniqueInput!
  data: FunctionContextUpdateWithoutCreatedByDataInput!
}

input FunctionContextUpdateWithWhereUniqueWithoutFuncInput {
  where: FunctionContextWhereUniqueInput!
  data: FunctionContextUpdateWithoutFuncDataInput!
}

input FunctionContextUpdateWithWhereUniqueWithoutHookedToInput {
  where: FunctionContextWhereUniqueInput!
  data: FunctionContextUpdateWithoutHookedToDataInput!
}

input FunctionContextUpsertWithoutLineGeneratorInput {
  update: FunctionContextUpdateWithoutLineGeneratorDataInput!
  create: FunctionContextCreateWithoutLineGeneratorInput!
}

input FunctionContextUpsertWithoutLogsInput {
  update: FunctionContextUpdateWithoutLogsDataInput!
  create: FunctionContextCreateWithoutLogsInput!
}

input FunctionContextUpsertWithWhereUniqueWithoutCreatedByInput {
  where: FunctionContextWhereUniqueInput!
  update: FunctionContextUpdateWithoutCreatedByDataInput!
  create: FunctionContextCreateWithoutCreatedByInput!
}

input FunctionContextUpsertWithWhereUniqueWithoutFuncInput {
  where: FunctionContextWhereUniqueInput!
  update: FunctionContextUpdateWithoutFuncDataInput!
  create: FunctionContextCreateWithoutFuncInput!
}

input FunctionContextUpsertWithWhereUniqueWithoutHookedToInput {
  where: FunctionContextWhereUniqueInput!
  update: FunctionContextUpdateWithoutHookedToDataInput!
  create: FunctionContextCreateWithoutHookedToInput!
}

input FunctionContextWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  func: FuncWhereInput
  hookedTo: LineGeneratorWhereInput
  lineGenerator: LineGeneratorWhereInput
  logs_every: LogWhereInput
  logs_some: LogWhereInput
  logs_none: LogWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FunctionContextWhereInput!]
  OR: [FunctionContextWhereInput!]
  NOT: [FunctionContextWhereInput!]
}

input FunctionContextWhereUniqueInput {
  id: ID
}

enum FuncType {
  LOCAL
  WEB
}

input FuncUpdateInput {
  author: String
  createdBy: UserUpdateOneWithoutFuncsInput
  contexts: FunctionContextUpdateManyWithoutFuncInput
  description: String
  meta: Json
  name: String
  options: Json
  optionsSchema: Json
  parametersSchema: Json
  source: String
  type: FuncType
}

input FuncUpdateManyDataInput {
  author: String
  description: String
  meta: Json
  name: String
  options: Json
  optionsSchema: Json
  parametersSchema: Json
  source: String
  type: FuncType
}

input FuncUpdateManyMutationInput {
  author: String
  description: String
  meta: Json
  name: String
  options: Json
  optionsSchema: Json
  parametersSchema: Json
  source: String
  type: FuncType
}

input FuncUpdateManyWithoutCreatedByInput {
  create: [FuncCreateWithoutCreatedByInput!]
  delete: [FuncWhereUniqueInput!]
  connect: [FuncWhereUniqueInput!]
  set: [FuncWhereUniqueInput!]
  disconnect: [FuncWhereUniqueInput!]
  update: [FuncUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [FuncUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [FuncScalarWhereInput!]
  updateMany: [FuncUpdateManyWithWhereNestedInput!]
}

input FuncUpdateManyWithWhereNestedInput {
  where: FuncScalarWhereInput!
  data: FuncUpdateManyDataInput!
}

input FuncUpdateOneWithoutContextsInput {
  create: FuncCreateWithoutContextsInput
  update: FuncUpdateWithoutContextsDataInput
  upsert: FuncUpsertWithoutContextsInput
  delete: Boolean
  disconnect: Boolean
  connect: FuncWhereUniqueInput
}

input FuncUpdateWithoutContextsDataInput {
  author: String
  createdBy: UserUpdateOneWithoutFuncsInput
  description: String
  meta: Json
  name: String
  options: Json
  optionsSchema: Json
  parametersSchema: Json
  source: String
  type: FuncType
}

input FuncUpdateWithoutCreatedByDataInput {
  author: String
  contexts: FunctionContextUpdateManyWithoutFuncInput
  description: String
  meta: Json
  name: String
  options: Json
  optionsSchema: Json
  parametersSchema: Json
  source: String
  type: FuncType
}

input FuncUpdateWithWhereUniqueWithoutCreatedByInput {
  where: FuncWhereUniqueInput!
  data: FuncUpdateWithoutCreatedByDataInput!
}

input FuncUpsertWithoutContextsInput {
  update: FuncUpdateWithoutContextsDataInput!
  create: FuncCreateWithoutContextsInput!
}

input FuncUpsertWithWhereUniqueWithoutCreatedByInput {
  where: FuncWhereUniqueInput!
  update: FuncUpdateWithoutCreatedByDataInput!
  create: FuncCreateWithoutCreatedByInput!
}

input FuncWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  contexts_every: FunctionContextWhereInput
  contexts_some: FunctionContextWhereInput
  contexts_none: FunctionContextWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  type: FuncType
  type_not: FuncType
  type_in: [FuncType!]
  type_not_in: [FuncType!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FuncWhereInput!]
  OR: [FuncWhereInput!]
  NOT: [FuncWhereInput!]
}

input FuncWhereUniqueInput {
  id: ID
  name: String
}

type Graph {
  id: ID!
  createdAt: DateTime!
  createdBy: User!
  dashboard: Dashboard!
  icon: String
  lineGenerators(where: LineGeneratorWhereInput, orderBy: LineGeneratorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineGenerator!]
  publicUrl: String
  title: String!
  updatedAt: DateTime!
  updateInterval: Int!
  updateTime: DateTime
  variables: Json
  xAxisLabel: String
  yAxisLabel: String
}

type GraphConnection {
  pageInfo: PageInfo!
  edges: [GraphEdge]!
  aggregate: AggregateGraph!
}

input GraphCreateInput {
  id: ID
  createdBy: UserCreateOneWithoutGraphsInput!
  dashboard: DashboardCreateOneWithoutGraphsInput!
  icon: String
  lineGenerators: LineGeneratorCreateManyWithoutGraphInput
  publicUrl: String
  title: String!
  updateInterval: Int
  updateTime: DateTime
  variables: Json
  xAxisLabel: String
  yAxisLabel: String
}

input GraphCreateManyWithoutCreatedByInput {
  create: [GraphCreateWithoutCreatedByInput!]
  connect: [GraphWhereUniqueInput!]
}

input GraphCreateManyWithoutDashboardInput {
  create: [GraphCreateWithoutDashboardInput!]
  connect: [GraphWhereUniqueInput!]
}

input GraphCreateOneWithoutLineGeneratorsInput {
  create: GraphCreateWithoutLineGeneratorsInput
  connect: GraphWhereUniqueInput
}

input GraphCreateWithoutCreatedByInput {
  id: ID
  dashboard: DashboardCreateOneWithoutGraphsInput!
  icon: String
  lineGenerators: LineGeneratorCreateManyWithoutGraphInput
  publicUrl: String
  title: String!
  updateInterval: Int
  updateTime: DateTime
  variables: Json
  xAxisLabel: String
  yAxisLabel: String
}

input GraphCreateWithoutDashboardInput {
  id: ID
  createdBy: UserCreateOneWithoutGraphsInput!
  icon: String
  lineGenerators: LineGeneratorCreateManyWithoutGraphInput
  publicUrl: String
  title: String!
  updateInterval: Int
  updateTime: DateTime
  variables: Json
  xAxisLabel: String
  yAxisLabel: String
}

input GraphCreateWithoutLineGeneratorsInput {
  id: ID
  createdBy: UserCreateOneWithoutGraphsInput!
  dashboard: DashboardCreateOneWithoutGraphsInput!
  icon: String
  publicUrl: String
  title: String!
  updateInterval: Int
  updateTime: DateTime
  variables: Json
  xAxisLabel: String
  yAxisLabel: String
}

type GraphEdge {
  node: Graph!
  cursor: String!
}

enum GraphOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  icon_ASC
  icon_DESC
  publicUrl_ASC
  publicUrl_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  updateInterval_ASC
  updateInterval_DESC
  updateTime_ASC
  updateTime_DESC
  variables_ASC
  variables_DESC
  xAxisLabel_ASC
  xAxisLabel_DESC
  yAxisLabel_ASC
  yAxisLabel_DESC
}

type GraphPreviousValues {
  id: ID!
  createdAt: DateTime!
  icon: String
  publicUrl: String
  title: String!
  updatedAt: DateTime!
  updateInterval: Int!
  updateTime: DateTime
  variables: Json
  xAxisLabel: String
  yAxisLabel: String
}

input GraphScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  publicUrl: String
  publicUrl_not: String
  publicUrl_in: [String!]
  publicUrl_not_in: [String!]
  publicUrl_lt: String
  publicUrl_lte: String
  publicUrl_gt: String
  publicUrl_gte: String
  publicUrl_contains: String
  publicUrl_not_contains: String
  publicUrl_starts_with: String
  publicUrl_not_starts_with: String
  publicUrl_ends_with: String
  publicUrl_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updateInterval: Int
  updateInterval_not: Int
  updateInterval_in: [Int!]
  updateInterval_not_in: [Int!]
  updateInterval_lt: Int
  updateInterval_lte: Int
  updateInterval_gt: Int
  updateInterval_gte: Int
  updateTime: DateTime
  updateTime_not: DateTime
  updateTime_in: [DateTime!]
  updateTime_not_in: [DateTime!]
  updateTime_lt: DateTime
  updateTime_lte: DateTime
  updateTime_gt: DateTime
  updateTime_gte: DateTime
  xAxisLabel: String
  xAxisLabel_not: String
  xAxisLabel_in: [String!]
  xAxisLabel_not_in: [String!]
  xAxisLabel_lt: String
  xAxisLabel_lte: String
  xAxisLabel_gt: String
  xAxisLabel_gte: String
  xAxisLabel_contains: String
  xAxisLabel_not_contains: String
  xAxisLabel_starts_with: String
  xAxisLabel_not_starts_with: String
  xAxisLabel_ends_with: String
  xAxisLabel_not_ends_with: String
  yAxisLabel: String
  yAxisLabel_not: String
  yAxisLabel_in: [String!]
  yAxisLabel_not_in: [String!]
  yAxisLabel_lt: String
  yAxisLabel_lte: String
  yAxisLabel_gt: String
  yAxisLabel_gte: String
  yAxisLabel_contains: String
  yAxisLabel_not_contains: String
  yAxisLabel_starts_with: String
  yAxisLabel_not_starts_with: String
  yAxisLabel_ends_with: String
  yAxisLabel_not_ends_with: String
  AND: [GraphScalarWhereInput!]
  OR: [GraphScalarWhereInput!]
  NOT: [GraphScalarWhereInput!]
}

type GraphSubscriptionPayload {
  mutation: MutationType!
  node: Graph
  updatedFields: [String!]
  previousValues: GraphPreviousValues
}

input GraphSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GraphWhereInput
  AND: [GraphSubscriptionWhereInput!]
  OR: [GraphSubscriptionWhereInput!]
  NOT: [GraphSubscriptionWhereInput!]
}

input GraphUpdateInput {
  createdBy: UserUpdateOneRequiredWithoutGraphsInput
  dashboard: DashboardUpdateOneRequiredWithoutGraphsInput
  icon: String
  lineGenerators: LineGeneratorUpdateManyWithoutGraphInput
  publicUrl: String
  title: String
  updateInterval: Int
  updateTime: DateTime
  variables: Json
  xAxisLabel: String
  yAxisLabel: String
}

input GraphUpdateManyDataInput {
  icon: String
  publicUrl: String
  title: String
  updateInterval: Int
  updateTime: DateTime
  variables: Json
  xAxisLabel: String
  yAxisLabel: String
}

input GraphUpdateManyMutationInput {
  icon: String
  publicUrl: String
  title: String
  updateInterval: Int
  updateTime: DateTime
  variables: Json
  xAxisLabel: String
  yAxisLabel: String
}

input GraphUpdateManyWithoutCreatedByInput {
  create: [GraphCreateWithoutCreatedByInput!]
  delete: [GraphWhereUniqueInput!]
  connect: [GraphWhereUniqueInput!]
  set: [GraphWhereUniqueInput!]
  disconnect: [GraphWhereUniqueInput!]
  update: [GraphUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [GraphUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [GraphScalarWhereInput!]
  updateMany: [GraphUpdateManyWithWhereNestedInput!]
}

input GraphUpdateManyWithoutDashboardInput {
  create: [GraphCreateWithoutDashboardInput!]
  delete: [GraphWhereUniqueInput!]
  connect: [GraphWhereUniqueInput!]
  set: [GraphWhereUniqueInput!]
  disconnect: [GraphWhereUniqueInput!]
  update: [GraphUpdateWithWhereUniqueWithoutDashboardInput!]
  upsert: [GraphUpsertWithWhereUniqueWithoutDashboardInput!]
  deleteMany: [GraphScalarWhereInput!]
  updateMany: [GraphUpdateManyWithWhereNestedInput!]
}

input GraphUpdateManyWithWhereNestedInput {
  where: GraphScalarWhereInput!
  data: GraphUpdateManyDataInput!
}

input GraphUpdateOneRequiredWithoutLineGeneratorsInput {
  create: GraphCreateWithoutLineGeneratorsInput
  update: GraphUpdateWithoutLineGeneratorsDataInput
  upsert: GraphUpsertWithoutLineGeneratorsInput
  connect: GraphWhereUniqueInput
}

input GraphUpdateWithoutCreatedByDataInput {
  dashboard: DashboardUpdateOneRequiredWithoutGraphsInput
  icon: String
  lineGenerators: LineGeneratorUpdateManyWithoutGraphInput
  publicUrl: String
  title: String
  updateInterval: Int
  updateTime: DateTime
  variables: Json
  xAxisLabel: String
  yAxisLabel: String
}

input GraphUpdateWithoutDashboardDataInput {
  createdBy: UserUpdateOneRequiredWithoutGraphsInput
  icon: String
  lineGenerators: LineGeneratorUpdateManyWithoutGraphInput
  publicUrl: String
  title: String
  updateInterval: Int
  updateTime: DateTime
  variables: Json
  xAxisLabel: String
  yAxisLabel: String
}

input GraphUpdateWithoutLineGeneratorsDataInput {
  createdBy: UserUpdateOneRequiredWithoutGraphsInput
  dashboard: DashboardUpdateOneRequiredWithoutGraphsInput
  icon: String
  publicUrl: String
  title: String
  updateInterval: Int
  updateTime: DateTime
  variables: Json
  xAxisLabel: String
  yAxisLabel: String
}

input GraphUpdateWithWhereUniqueWithoutCreatedByInput {
  where: GraphWhereUniqueInput!
  data: GraphUpdateWithoutCreatedByDataInput!
}

input GraphUpdateWithWhereUniqueWithoutDashboardInput {
  where: GraphWhereUniqueInput!
  data: GraphUpdateWithoutDashboardDataInput!
}

input GraphUpsertWithoutLineGeneratorsInput {
  update: GraphUpdateWithoutLineGeneratorsDataInput!
  create: GraphCreateWithoutLineGeneratorsInput!
}

input GraphUpsertWithWhereUniqueWithoutCreatedByInput {
  where: GraphWhereUniqueInput!
  update: GraphUpdateWithoutCreatedByDataInput!
  create: GraphCreateWithoutCreatedByInput!
}

input GraphUpsertWithWhereUniqueWithoutDashboardInput {
  where: GraphWhereUniqueInput!
  update: GraphUpdateWithoutDashboardDataInput!
  create: GraphCreateWithoutDashboardInput!
}

input GraphWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  dashboard: DashboardWhereInput
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  lineGenerators_every: LineGeneratorWhereInput
  lineGenerators_some: LineGeneratorWhereInput
  lineGenerators_none: LineGeneratorWhereInput
  publicUrl: String
  publicUrl_not: String
  publicUrl_in: [String!]
  publicUrl_not_in: [String!]
  publicUrl_lt: String
  publicUrl_lte: String
  publicUrl_gt: String
  publicUrl_gte: String
  publicUrl_contains: String
  publicUrl_not_contains: String
  publicUrl_starts_with: String
  publicUrl_not_starts_with: String
  publicUrl_ends_with: String
  publicUrl_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updateInterval: Int
  updateInterval_not: Int
  updateInterval_in: [Int!]
  updateInterval_not_in: [Int!]
  updateInterval_lt: Int
  updateInterval_lte: Int
  updateInterval_gt: Int
  updateInterval_gte: Int
  updateTime: DateTime
  updateTime_not: DateTime
  updateTime_in: [DateTime!]
  updateTime_not_in: [DateTime!]
  updateTime_lt: DateTime
  updateTime_lte: DateTime
  updateTime_gt: DateTime
  updateTime_gte: DateTime
  xAxisLabel: String
  xAxisLabel_not: String
  xAxisLabel_in: [String!]
  xAxisLabel_not_in: [String!]
  xAxisLabel_lt: String
  xAxisLabel_lte: String
  xAxisLabel_gt: String
  xAxisLabel_gte: String
  xAxisLabel_contains: String
  xAxisLabel_not_contains: String
  xAxisLabel_starts_with: String
  xAxisLabel_not_starts_with: String
  xAxisLabel_ends_with: String
  xAxisLabel_not_ends_with: String
  yAxisLabel: String
  yAxisLabel_not: String
  yAxisLabel_in: [String!]
  yAxisLabel_not_in: [String!]
  yAxisLabel_lt: String
  yAxisLabel_lte: String
  yAxisLabel_gt: String
  yAxisLabel_gte: String
  yAxisLabel_contains: String
  yAxisLabel_not_contains: String
  yAxisLabel_starts_with: String
  yAxisLabel_not_starts_with: String
  yAxisLabel_ends_with: String
  yAxisLabel_not_ends_with: String
  AND: [GraphWhereInput!]
  OR: [GraphWhereInput!]
  NOT: [GraphWhereInput!]
}

input GraphWhereUniqueInput {
  id: ID
}

scalar Json

type Line {
  id: ID!
  createdAt: DateTime!
  lineGenerator: LineGenerator!
  points(where: PointWhereInput, orderBy: PointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Point!]
  updatedAt: DateTime!
}

type LineConnection {
  pageInfo: PageInfo!
  edges: [LineEdge]!
  aggregate: AggregateLine!
}

input LineCreateInput {
  id: ID
  lineGenerator: LineGeneratorCreateOneWithoutLineInput!
  points: PointCreateManyWithoutLineInput
}

input LineCreateOneWithoutLineGeneratorInput {
  create: LineCreateWithoutLineGeneratorInput
  connect: LineWhereUniqueInput
}

input LineCreateOneWithoutPointsInput {
  create: LineCreateWithoutPointsInput
  connect: LineWhereUniqueInput
}

input LineCreateWithoutLineGeneratorInput {
  id: ID
  points: PointCreateManyWithoutLineInput
}

input LineCreateWithoutPointsInput {
  id: ID
  lineGenerator: LineGeneratorCreateOneWithoutLineInput!
}

type LineEdge {
  node: Line!
  cursor: String!
}

type LineGenerator {
  id: ID!
  color: String
  createdAt: DateTime!
  createdBy: User!
  dataSource: FunctionContext
  graph: Graph!
  hooks(where: FunctionContextWhereInput, orderBy: FunctionContextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FunctionContext!]
  line: Line
  name: String!
  state: LineGeneratorState!
  updatedAt: DateTime!
}

type LineGeneratorConnection {
  pageInfo: PageInfo!
  edges: [LineGeneratorEdge]!
  aggregate: AggregateLineGenerator!
}

input LineGeneratorCreateInput {
  id: ID
  color: String
  createdBy: UserCreateOneWithoutLineGeneratorsInput!
  dataSource: FunctionContextCreateOneWithoutLineGeneratorInput
  graph: GraphCreateOneWithoutLineGeneratorsInput!
  hooks: FunctionContextCreateManyWithoutHookedToInput
  line: LineCreateOneWithoutLineGeneratorInput
  name: String!
  state: LineGeneratorState
}

input LineGeneratorCreateManyWithoutCreatedByInput {
  create: [LineGeneratorCreateWithoutCreatedByInput!]
  connect: [LineGeneratorWhereUniqueInput!]
}

input LineGeneratorCreateManyWithoutGraphInput {
  create: [LineGeneratorCreateWithoutGraphInput!]
  connect: [LineGeneratorWhereUniqueInput!]
}

input LineGeneratorCreateOneWithoutDataSourceInput {
  create: LineGeneratorCreateWithoutDataSourceInput
  connect: LineGeneratorWhereUniqueInput
}

input LineGeneratorCreateOneWithoutHooksInput {
  create: LineGeneratorCreateWithoutHooksInput
  connect: LineGeneratorWhereUniqueInput
}

input LineGeneratorCreateOneWithoutLineInput {
  create: LineGeneratorCreateWithoutLineInput
  connect: LineGeneratorWhereUniqueInput
}

input LineGeneratorCreateWithoutCreatedByInput {
  id: ID
  color: String
  dataSource: FunctionContextCreateOneWithoutLineGeneratorInput
  graph: GraphCreateOneWithoutLineGeneratorsInput!
  hooks: FunctionContextCreateManyWithoutHookedToInput
  line: LineCreateOneWithoutLineGeneratorInput
  name: String!
  state: LineGeneratorState
}

input LineGeneratorCreateWithoutDataSourceInput {
  id: ID
  color: String
  createdBy: UserCreateOneWithoutLineGeneratorsInput!
  graph: GraphCreateOneWithoutLineGeneratorsInput!
  hooks: FunctionContextCreateManyWithoutHookedToInput
  line: LineCreateOneWithoutLineGeneratorInput
  name: String!
  state: LineGeneratorState
}

input LineGeneratorCreateWithoutGraphInput {
  id: ID
  color: String
  createdBy: UserCreateOneWithoutLineGeneratorsInput!
  dataSource: FunctionContextCreateOneWithoutLineGeneratorInput
  hooks: FunctionContextCreateManyWithoutHookedToInput
  line: LineCreateOneWithoutLineGeneratorInput
  name: String!
  state: LineGeneratorState
}

input LineGeneratorCreateWithoutHooksInput {
  id: ID
  color: String
  createdBy: UserCreateOneWithoutLineGeneratorsInput!
  dataSource: FunctionContextCreateOneWithoutLineGeneratorInput
  graph: GraphCreateOneWithoutLineGeneratorsInput!
  line: LineCreateOneWithoutLineGeneratorInput
  name: String!
  state: LineGeneratorState
}

input LineGeneratorCreateWithoutLineInput {
  id: ID
  color: String
  createdBy: UserCreateOneWithoutLineGeneratorsInput!
  dataSource: FunctionContextCreateOneWithoutLineGeneratorInput
  graph: GraphCreateOneWithoutLineGeneratorsInput!
  hooks: FunctionContextCreateManyWithoutHookedToInput
  name: String!
  state: LineGeneratorState
}

type LineGeneratorEdge {
  node: LineGenerator!
  cursor: String!
}

enum LineGeneratorOrderByInput {
  id_ASC
  id_DESC
  color_ASC
  color_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  state_ASC
  state_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LineGeneratorPreviousValues {
  id: ID!
  color: String
  createdAt: DateTime!
  name: String!
  state: LineGeneratorState!
  updatedAt: DateTime!
}

input LineGeneratorScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  state: LineGeneratorState
  state_not: LineGeneratorState
  state_in: [LineGeneratorState!]
  state_not_in: [LineGeneratorState!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LineGeneratorScalarWhereInput!]
  OR: [LineGeneratorScalarWhereInput!]
  NOT: [LineGeneratorScalarWhereInput!]
}

enum LineGeneratorState {
  DISABLED
  ENABLED
  HIDDEN
}

type LineGeneratorSubscriptionPayload {
  mutation: MutationType!
  node: LineGenerator
  updatedFields: [String!]
  previousValues: LineGeneratorPreviousValues
}

input LineGeneratorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LineGeneratorWhereInput
  AND: [LineGeneratorSubscriptionWhereInput!]
  OR: [LineGeneratorSubscriptionWhereInput!]
  NOT: [LineGeneratorSubscriptionWhereInput!]
}

input LineGeneratorUpdateInput {
  color: String
  createdBy: UserUpdateOneRequiredWithoutLineGeneratorsInput
  dataSource: FunctionContextUpdateOneWithoutLineGeneratorInput
  graph: GraphUpdateOneRequiredWithoutLineGeneratorsInput
  hooks: FunctionContextUpdateManyWithoutHookedToInput
  line: LineUpdateOneWithoutLineGeneratorInput
  name: String
  state: LineGeneratorState
}

input LineGeneratorUpdateManyDataInput {
  color: String
  name: String
  state: LineGeneratorState
}

input LineGeneratorUpdateManyMutationInput {
  color: String
  name: String
  state: LineGeneratorState
}

input LineGeneratorUpdateManyWithoutCreatedByInput {
  create: [LineGeneratorCreateWithoutCreatedByInput!]
  delete: [LineGeneratorWhereUniqueInput!]
  connect: [LineGeneratorWhereUniqueInput!]
  set: [LineGeneratorWhereUniqueInput!]
  disconnect: [LineGeneratorWhereUniqueInput!]
  update: [LineGeneratorUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [LineGeneratorUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [LineGeneratorScalarWhereInput!]
  updateMany: [LineGeneratorUpdateManyWithWhereNestedInput!]
}

input LineGeneratorUpdateManyWithoutGraphInput {
  create: [LineGeneratorCreateWithoutGraphInput!]
  delete: [LineGeneratorWhereUniqueInput!]
  connect: [LineGeneratorWhereUniqueInput!]
  set: [LineGeneratorWhereUniqueInput!]
  disconnect: [LineGeneratorWhereUniqueInput!]
  update: [LineGeneratorUpdateWithWhereUniqueWithoutGraphInput!]
  upsert: [LineGeneratorUpsertWithWhereUniqueWithoutGraphInput!]
  deleteMany: [LineGeneratorScalarWhereInput!]
  updateMany: [LineGeneratorUpdateManyWithWhereNestedInput!]
}

input LineGeneratorUpdateManyWithWhereNestedInput {
  where: LineGeneratorScalarWhereInput!
  data: LineGeneratorUpdateManyDataInput!
}

input LineGeneratorUpdateOneRequiredWithoutLineInput {
  create: LineGeneratorCreateWithoutLineInput
  update: LineGeneratorUpdateWithoutLineDataInput
  upsert: LineGeneratorUpsertWithoutLineInput
  connect: LineGeneratorWhereUniqueInput
}

input LineGeneratorUpdateOneWithoutDataSourceInput {
  create: LineGeneratorCreateWithoutDataSourceInput
  update: LineGeneratorUpdateWithoutDataSourceDataInput
  upsert: LineGeneratorUpsertWithoutDataSourceInput
  delete: Boolean
  disconnect: Boolean
  connect: LineGeneratorWhereUniqueInput
}

input LineGeneratorUpdateOneWithoutHooksInput {
  create: LineGeneratorCreateWithoutHooksInput
  update: LineGeneratorUpdateWithoutHooksDataInput
  upsert: LineGeneratorUpsertWithoutHooksInput
  delete: Boolean
  disconnect: Boolean
  connect: LineGeneratorWhereUniqueInput
}

input LineGeneratorUpdateWithoutCreatedByDataInput {
  color: String
  dataSource: FunctionContextUpdateOneWithoutLineGeneratorInput
  graph: GraphUpdateOneRequiredWithoutLineGeneratorsInput
  hooks: FunctionContextUpdateManyWithoutHookedToInput
  line: LineUpdateOneWithoutLineGeneratorInput
  name: String
  state: LineGeneratorState
}

input LineGeneratorUpdateWithoutDataSourceDataInput {
  color: String
  createdBy: UserUpdateOneRequiredWithoutLineGeneratorsInput
  graph: GraphUpdateOneRequiredWithoutLineGeneratorsInput
  hooks: FunctionContextUpdateManyWithoutHookedToInput
  line: LineUpdateOneWithoutLineGeneratorInput
  name: String
  state: LineGeneratorState
}

input LineGeneratorUpdateWithoutGraphDataInput {
  color: String
  createdBy: UserUpdateOneRequiredWithoutLineGeneratorsInput
  dataSource: FunctionContextUpdateOneWithoutLineGeneratorInput
  hooks: FunctionContextUpdateManyWithoutHookedToInput
  line: LineUpdateOneWithoutLineGeneratorInput
  name: String
  state: LineGeneratorState
}

input LineGeneratorUpdateWithoutHooksDataInput {
  color: String
  createdBy: UserUpdateOneRequiredWithoutLineGeneratorsInput
  dataSource: FunctionContextUpdateOneWithoutLineGeneratorInput
  graph: GraphUpdateOneRequiredWithoutLineGeneratorsInput
  line: LineUpdateOneWithoutLineGeneratorInput
  name: String
  state: LineGeneratorState
}

input LineGeneratorUpdateWithoutLineDataInput {
  color: String
  createdBy: UserUpdateOneRequiredWithoutLineGeneratorsInput
  dataSource: FunctionContextUpdateOneWithoutLineGeneratorInput
  graph: GraphUpdateOneRequiredWithoutLineGeneratorsInput
  hooks: FunctionContextUpdateManyWithoutHookedToInput
  name: String
  state: LineGeneratorState
}

input LineGeneratorUpdateWithWhereUniqueWithoutCreatedByInput {
  where: LineGeneratorWhereUniqueInput!
  data: LineGeneratorUpdateWithoutCreatedByDataInput!
}

input LineGeneratorUpdateWithWhereUniqueWithoutGraphInput {
  where: LineGeneratorWhereUniqueInput!
  data: LineGeneratorUpdateWithoutGraphDataInput!
}

input LineGeneratorUpsertWithoutDataSourceInput {
  update: LineGeneratorUpdateWithoutDataSourceDataInput!
  create: LineGeneratorCreateWithoutDataSourceInput!
}

input LineGeneratorUpsertWithoutHooksInput {
  update: LineGeneratorUpdateWithoutHooksDataInput!
  create: LineGeneratorCreateWithoutHooksInput!
}

input LineGeneratorUpsertWithoutLineInput {
  update: LineGeneratorUpdateWithoutLineDataInput!
  create: LineGeneratorCreateWithoutLineInput!
}

input LineGeneratorUpsertWithWhereUniqueWithoutCreatedByInput {
  where: LineGeneratorWhereUniqueInput!
  update: LineGeneratorUpdateWithoutCreatedByDataInput!
  create: LineGeneratorCreateWithoutCreatedByInput!
}

input LineGeneratorUpsertWithWhereUniqueWithoutGraphInput {
  where: LineGeneratorWhereUniqueInput!
  update: LineGeneratorUpdateWithoutGraphDataInput!
  create: LineGeneratorCreateWithoutGraphInput!
}

input LineGeneratorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  dataSource: FunctionContextWhereInput
  graph: GraphWhereInput
  hooks_every: FunctionContextWhereInput
  hooks_some: FunctionContextWhereInput
  hooks_none: FunctionContextWhereInput
  line: LineWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  state: LineGeneratorState
  state_not: LineGeneratorState
  state_in: [LineGeneratorState!]
  state_not_in: [LineGeneratorState!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LineGeneratorWhereInput!]
  OR: [LineGeneratorWhereInput!]
  NOT: [LineGeneratorWhereInput!]
}

input LineGeneratorWhereUniqueInput {
  id: ID
  name: String
}

enum LineOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LinePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LineSubscriptionPayload {
  mutation: MutationType!
  node: Line
  updatedFields: [String!]
  previousValues: LinePreviousValues
}

input LineSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LineWhereInput
  AND: [LineSubscriptionWhereInput!]
  OR: [LineSubscriptionWhereInput!]
  NOT: [LineSubscriptionWhereInput!]
}

input LineUpdateInput {
  lineGenerator: LineGeneratorUpdateOneRequiredWithoutLineInput
  points: PointUpdateManyWithoutLineInput
}

input LineUpdateOneRequiredWithoutPointsInput {
  create: LineCreateWithoutPointsInput
  update: LineUpdateWithoutPointsDataInput
  upsert: LineUpsertWithoutPointsInput
  connect: LineWhereUniqueInput
}

input LineUpdateOneWithoutLineGeneratorInput {
  create: LineCreateWithoutLineGeneratorInput
  update: LineUpdateWithoutLineGeneratorDataInput
  upsert: LineUpsertWithoutLineGeneratorInput
  delete: Boolean
  disconnect: Boolean
  connect: LineWhereUniqueInput
}

input LineUpdateWithoutLineGeneratorDataInput {
  points: PointUpdateManyWithoutLineInput
}

input LineUpdateWithoutPointsDataInput {
  lineGenerator: LineGeneratorUpdateOneRequiredWithoutLineInput
}

input LineUpsertWithoutLineGeneratorInput {
  update: LineUpdateWithoutLineGeneratorDataInput!
  create: LineCreateWithoutLineGeneratorInput!
}

input LineUpsertWithoutPointsInput {
  update: LineUpdateWithoutPointsDataInput!
  create: LineCreateWithoutPointsInput!
}

input LineWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  lineGenerator: LineGeneratorWhereInput
  points_every: PointWhereInput
  points_some: PointWhereInput
  points_none: PointWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LineWhereInput!]
  OR: [LineWhereInput!]
  NOT: [LineWhereInput!]
}

input LineWhereUniqueInput {
  id: ID
}

type Log {
  id: ID!
  createdAt: DateTime!
  context: FunctionContext!
  message: String!
  type: LogType!
  updatedAt: DateTime!
}

type LogConnection {
  pageInfo: PageInfo!
  edges: [LogEdge]!
  aggregate: AggregateLog!
}

input LogCreateInput {
  id: ID
  context: FunctionContextCreateOneWithoutLogsInput!
  message: String!
  type: LogType
}

input LogCreateManyWithoutContextInput {
  create: [LogCreateWithoutContextInput!]
  connect: [LogWhereUniqueInput!]
}

input LogCreateWithoutContextInput {
  id: ID
  message: String!
  type: LogType
}

type LogEdge {
  node: Log!
  cursor: String!
}

enum LogOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  message_ASC
  message_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LogPreviousValues {
  id: ID!
  createdAt: DateTime!
  message: String!
  type: LogType!
  updatedAt: DateTime!
}

input LogScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  type: LogType
  type_not: LogType
  type_in: [LogType!]
  type_not_in: [LogType!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LogScalarWhereInput!]
  OR: [LogScalarWhereInput!]
  NOT: [LogScalarWhereInput!]
}

type LogSubscriptionPayload {
  mutation: MutationType!
  node: Log
  updatedFields: [String!]
  previousValues: LogPreviousValues
}

input LogSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LogWhereInput
  AND: [LogSubscriptionWhereInput!]
  OR: [LogSubscriptionWhereInput!]
  NOT: [LogSubscriptionWhereInput!]
}

enum LogType {
  ERROR
  INFO
  WARNING
}

input LogUpdateInput {
  context: FunctionContextUpdateOneRequiredWithoutLogsInput
  message: String
  type: LogType
}

input LogUpdateManyDataInput {
  message: String
  type: LogType
}

input LogUpdateManyMutationInput {
  message: String
  type: LogType
}

input LogUpdateManyWithoutContextInput {
  create: [LogCreateWithoutContextInput!]
  delete: [LogWhereUniqueInput!]
  connect: [LogWhereUniqueInput!]
  set: [LogWhereUniqueInput!]
  disconnect: [LogWhereUniqueInput!]
  update: [LogUpdateWithWhereUniqueWithoutContextInput!]
  upsert: [LogUpsertWithWhereUniqueWithoutContextInput!]
  deleteMany: [LogScalarWhereInput!]
  updateMany: [LogUpdateManyWithWhereNestedInput!]
}

input LogUpdateManyWithWhereNestedInput {
  where: LogScalarWhereInput!
  data: LogUpdateManyDataInput!
}

input LogUpdateWithoutContextDataInput {
  message: String
  type: LogType
}

input LogUpdateWithWhereUniqueWithoutContextInput {
  where: LogWhereUniqueInput!
  data: LogUpdateWithoutContextDataInput!
}

input LogUpsertWithWhereUniqueWithoutContextInput {
  where: LogWhereUniqueInput!
  update: LogUpdateWithoutContextDataInput!
  create: LogCreateWithoutContextInput!
}

input LogWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  context: FunctionContextWhereInput
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  type: LogType
  type_not: LogType
  type_in: [LogType!]
  type_not_in: [LogType!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LogWhereInput!]
  OR: [LogWhereInput!]
  NOT: [LogWhereInput!]
}

input LogWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createDashboard(data: DashboardCreateInput!): Dashboard!
  updateDashboard(data: DashboardUpdateInput!, where: DashboardWhereUniqueInput!): Dashboard
  updateManyDashboards(data: DashboardUpdateManyMutationInput!, where: DashboardWhereInput): BatchPayload!
  upsertDashboard(where: DashboardWhereUniqueInput!, create: DashboardCreateInput!, update: DashboardUpdateInput!): Dashboard!
  deleteDashboard(where: DashboardWhereUniqueInput!): Dashboard
  deleteManyDashboards(where: DashboardWhereInput): BatchPayload!
  createFunc(data: FuncCreateInput!): Func!
  updateFunc(data: FuncUpdateInput!, where: FuncWhereUniqueInput!): Func
  updateManyFuncs(data: FuncUpdateManyMutationInput!, where: FuncWhereInput): BatchPayload!
  upsertFunc(where: FuncWhereUniqueInput!, create: FuncCreateInput!, update: FuncUpdateInput!): Func!
  deleteFunc(where: FuncWhereUniqueInput!): Func
  deleteManyFuncs(where: FuncWhereInput): BatchPayload!
  createFunctionContext(data: FunctionContextCreateInput!): FunctionContext!
  updateFunctionContext(data: FunctionContextUpdateInput!, where: FunctionContextWhereUniqueInput!): FunctionContext
  updateManyFunctionContexts(data: FunctionContextUpdateManyMutationInput!, where: FunctionContextWhereInput): BatchPayload!
  upsertFunctionContext(where: FunctionContextWhereUniqueInput!, create: FunctionContextCreateInput!, update: FunctionContextUpdateInput!): FunctionContext!
  deleteFunctionContext(where: FunctionContextWhereUniqueInput!): FunctionContext
  deleteManyFunctionContexts(where: FunctionContextWhereInput): BatchPayload!
  createGraph(data: GraphCreateInput!): Graph!
  updateGraph(data: GraphUpdateInput!, where: GraphWhereUniqueInput!): Graph
  updateManyGraphs(data: GraphUpdateManyMutationInput!, where: GraphWhereInput): BatchPayload!
  upsertGraph(where: GraphWhereUniqueInput!, create: GraphCreateInput!, update: GraphUpdateInput!): Graph!
  deleteGraph(where: GraphWhereUniqueInput!): Graph
  deleteManyGraphs(where: GraphWhereInput): BatchPayload!
  createLine(data: LineCreateInput!): Line!
  updateLine(data: LineUpdateInput!, where: LineWhereUniqueInput!): Line
  upsertLine(where: LineWhereUniqueInput!, create: LineCreateInput!, update: LineUpdateInput!): Line!
  deleteLine(where: LineWhereUniqueInput!): Line
  deleteManyLines(where: LineWhereInput): BatchPayload!
  createLineGenerator(data: LineGeneratorCreateInput!): LineGenerator!
  updateLineGenerator(data: LineGeneratorUpdateInput!, where: LineGeneratorWhereUniqueInput!): LineGenerator
  updateManyLineGenerators(data: LineGeneratorUpdateManyMutationInput!, where: LineGeneratorWhereInput): BatchPayload!
  upsertLineGenerator(where: LineGeneratorWhereUniqueInput!, create: LineGeneratorCreateInput!, update: LineGeneratorUpdateInput!): LineGenerator!
  deleteLineGenerator(where: LineGeneratorWhereUniqueInput!): LineGenerator
  deleteManyLineGenerators(where: LineGeneratorWhereInput): BatchPayload!
  createLog(data: LogCreateInput!): Log!
  updateLog(data: LogUpdateInput!, where: LogWhereUniqueInput!): Log
  updateManyLogs(data: LogUpdateManyMutationInput!, where: LogWhereInput): BatchPayload!
  upsertLog(where: LogWhereUniqueInput!, create: LogCreateInput!, update: LogUpdateInput!): Log!
  deleteLog(where: LogWhereUniqueInput!): Log
  deleteManyLogs(where: LogWhereInput): BatchPayload!
  createPoint(data: PointCreateInput!): Point!
  updatePoint(data: PointUpdateInput!, where: PointWhereUniqueInput!): Point
  updateManyPoints(data: PointUpdateManyMutationInput!, where: PointWhereInput): BatchPayload!
  upsertPoint(where: PointWhereUniqueInput!, create: PointCreateInput!, update: PointUpdateInput!): Point!
  deletePoint(where: PointWhereUniqueInput!): Point
  deleteManyPoints(where: PointWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Point {
  id: ID!
  createdAt: DateTime!
  hidden: Boolean
  line: Line!
  updatedAt: DateTime!
  x: DateTime!
  y: Float!
}

type PointConnection {
  pageInfo: PageInfo!
  edges: [PointEdge]!
  aggregate: AggregatePoint!
}

input PointCreateInput {
  id: ID
  hidden: Boolean
  line: LineCreateOneWithoutPointsInput!
  x: DateTime!
  y: Float!
}

input PointCreateManyWithoutLineInput {
  create: [PointCreateWithoutLineInput!]
  connect: [PointWhereUniqueInput!]
}

input PointCreateWithoutLineInput {
  id: ID
  hidden: Boolean
  x: DateTime!
  y: Float!
}

type PointEdge {
  node: Point!
  cursor: String!
}

enum PointOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  hidden_ASC
  hidden_DESC
  updatedAt_ASC
  updatedAt_DESC
  x_ASC
  x_DESC
  y_ASC
  y_DESC
}

type PointPreviousValues {
  id: ID!
  createdAt: DateTime!
  hidden: Boolean
  updatedAt: DateTime!
  x: DateTime!
  y: Float!
}

input PointScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  hidden: Boolean
  hidden_not: Boolean
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  x: DateTime
  x_not: DateTime
  x_in: [DateTime!]
  x_not_in: [DateTime!]
  x_lt: DateTime
  x_lte: DateTime
  x_gt: DateTime
  x_gte: DateTime
  y: Float
  y_not: Float
  y_in: [Float!]
  y_not_in: [Float!]
  y_lt: Float
  y_lte: Float
  y_gt: Float
  y_gte: Float
  AND: [PointScalarWhereInput!]
  OR: [PointScalarWhereInput!]
  NOT: [PointScalarWhereInput!]
}

type PointSubscriptionPayload {
  mutation: MutationType!
  node: Point
  updatedFields: [String!]
  previousValues: PointPreviousValues
}

input PointSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PointWhereInput
  AND: [PointSubscriptionWhereInput!]
  OR: [PointSubscriptionWhereInput!]
  NOT: [PointSubscriptionWhereInput!]
}

input PointUpdateInput {
  hidden: Boolean
  line: LineUpdateOneRequiredWithoutPointsInput
  x: DateTime
  y: Float
}

input PointUpdateManyDataInput {
  hidden: Boolean
  x: DateTime
  y: Float
}

input PointUpdateManyMutationInput {
  hidden: Boolean
  x: DateTime
  y: Float
}

input PointUpdateManyWithoutLineInput {
  create: [PointCreateWithoutLineInput!]
  delete: [PointWhereUniqueInput!]
  connect: [PointWhereUniqueInput!]
  set: [PointWhereUniqueInput!]
  disconnect: [PointWhereUniqueInput!]
  update: [PointUpdateWithWhereUniqueWithoutLineInput!]
  upsert: [PointUpsertWithWhereUniqueWithoutLineInput!]
  deleteMany: [PointScalarWhereInput!]
  updateMany: [PointUpdateManyWithWhereNestedInput!]
}

input PointUpdateManyWithWhereNestedInput {
  where: PointScalarWhereInput!
  data: PointUpdateManyDataInput!
}

input PointUpdateWithoutLineDataInput {
  hidden: Boolean
  x: DateTime
  y: Float
}

input PointUpdateWithWhereUniqueWithoutLineInput {
  where: PointWhereUniqueInput!
  data: PointUpdateWithoutLineDataInput!
}

input PointUpsertWithWhereUniqueWithoutLineInput {
  where: PointWhereUniqueInput!
  update: PointUpdateWithoutLineDataInput!
  create: PointCreateWithoutLineInput!
}

input PointWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  hidden: Boolean
  hidden_not: Boolean
  line: LineWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  x: DateTime
  x_not: DateTime
  x_in: [DateTime!]
  x_not_in: [DateTime!]
  x_lt: DateTime
  x_lte: DateTime
  x_gt: DateTime
  x_gte: DateTime
  y: Float
  y_not: Float
  y_in: [Float!]
  y_not_in: [Float!]
  y_lt: Float
  y_lte: Float
  y_gt: Float
  y_gte: Float
  AND: [PointWhereInput!]
  OR: [PointWhereInput!]
  NOT: [PointWhereInput!]
}

input PointWhereUniqueInput {
  id: ID
}

type Query {
  dashboard(where: DashboardWhereUniqueInput!): Dashboard
  dashboards(where: DashboardWhereInput, orderBy: DashboardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dashboard]!
  dashboardsConnection(where: DashboardWhereInput, orderBy: DashboardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DashboardConnection!
  func(where: FuncWhereUniqueInput!): Func
  funcs(where: FuncWhereInput, orderBy: FuncOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Func]!
  funcsConnection(where: FuncWhereInput, orderBy: FuncOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FuncConnection!
  functionContext(where: FunctionContextWhereUniqueInput!): FunctionContext
  functionContexts(where: FunctionContextWhereInput, orderBy: FunctionContextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FunctionContext]!
  functionContextsConnection(where: FunctionContextWhereInput, orderBy: FunctionContextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FunctionContextConnection!
  graph(where: GraphWhereUniqueInput!): Graph
  graphs(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Graph]!
  graphsConnection(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GraphConnection!
  line(where: LineWhereUniqueInput!): Line
  lines(where: LineWhereInput, orderBy: LineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Line]!
  linesConnection(where: LineWhereInput, orderBy: LineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LineConnection!
  lineGenerator(where: LineGeneratorWhereUniqueInput!): LineGenerator
  lineGenerators(where: LineGeneratorWhereInput, orderBy: LineGeneratorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineGenerator]!
  lineGeneratorsConnection(where: LineGeneratorWhereInput, orderBy: LineGeneratorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LineGeneratorConnection!
  log(where: LogWhereUniqueInput!): Log
  logs(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Log]!
  logsConnection(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LogConnection!
  point(where: PointWhereUniqueInput!): Point
  points(where: PointWhereInput, orderBy: PointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Point]!
  pointsConnection(where: PointWhereInput, orderBy: PointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PointConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  MEMBER
  SUPER_ADMIN
}

type Subscription {
  dashboard(where: DashboardSubscriptionWhereInput): DashboardSubscriptionPayload
  func(where: FuncSubscriptionWhereInput): FuncSubscriptionPayload
  functionContext(where: FunctionContextSubscriptionWhereInput): FunctionContextSubscriptionPayload
  graph(where: GraphSubscriptionWhereInput): GraphSubscriptionPayload
  line(where: LineSubscriptionWhereInput): LineSubscriptionPayload
  lineGenerator(where: LineGeneratorSubscriptionWhereInput): LineGeneratorSubscriptionPayload
  log(where: LogSubscriptionWhereInput): LogSubscriptionPayload
  point(where: PointSubscriptionWhereInput): PointSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  dashboards(where: DashboardWhereInput, orderBy: DashboardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dashboard!]
  displayName: String!
  email: String!
  funcs(where: FuncWhereInput, orderBy: FuncOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Func!]
  functionContexts(where: FunctionContextWhereInput, orderBy: FunctionContextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FunctionContext!]
  graphs(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Graph!]
  lineGenerators(where: LineGeneratorWhereInput, orderBy: LineGeneratorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineGenerator!]
  password: String!
  role: Role!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  dashboards: DashboardCreateManyWithoutCreatedByInput
  displayName: String!
  email: String!
  funcs: FuncCreateManyWithoutCreatedByInput
  functionContexts: FunctionContextCreateManyWithoutCreatedByInput
  graphs: GraphCreateManyWithoutCreatedByInput
  lineGenerators: LineGeneratorCreateManyWithoutCreatedByInput
  password: String!
  role: Role
}

input UserCreateOneWithoutDashboardsInput {
  create: UserCreateWithoutDashboardsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFuncsInput {
  create: UserCreateWithoutFuncsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFunctionContextsInput {
  create: UserCreateWithoutFunctionContextsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGraphsInput {
  create: UserCreateWithoutGraphsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLineGeneratorsInput {
  create: UserCreateWithoutLineGeneratorsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutDashboardsInput {
  id: ID
  displayName: String!
  email: String!
  funcs: FuncCreateManyWithoutCreatedByInput
  functionContexts: FunctionContextCreateManyWithoutCreatedByInput
  graphs: GraphCreateManyWithoutCreatedByInput
  lineGenerators: LineGeneratorCreateManyWithoutCreatedByInput
  password: String!
  role: Role
}

input UserCreateWithoutFuncsInput {
  id: ID
  dashboards: DashboardCreateManyWithoutCreatedByInput
  displayName: String!
  email: String!
  functionContexts: FunctionContextCreateManyWithoutCreatedByInput
  graphs: GraphCreateManyWithoutCreatedByInput
  lineGenerators: LineGeneratorCreateManyWithoutCreatedByInput
  password: String!
  role: Role
}

input UserCreateWithoutFunctionContextsInput {
  id: ID
  dashboards: DashboardCreateManyWithoutCreatedByInput
  displayName: String!
  email: String!
  funcs: FuncCreateManyWithoutCreatedByInput
  graphs: GraphCreateManyWithoutCreatedByInput
  lineGenerators: LineGeneratorCreateManyWithoutCreatedByInput
  password: String!
  role: Role
}

input UserCreateWithoutGraphsInput {
  id: ID
  dashboards: DashboardCreateManyWithoutCreatedByInput
  displayName: String!
  email: String!
  funcs: FuncCreateManyWithoutCreatedByInput
  functionContexts: FunctionContextCreateManyWithoutCreatedByInput
  lineGenerators: LineGeneratorCreateManyWithoutCreatedByInput
  password: String!
  role: Role
}

input UserCreateWithoutLineGeneratorsInput {
  id: ID
  dashboards: DashboardCreateManyWithoutCreatedByInput
  displayName: String!
  email: String!
  funcs: FuncCreateManyWithoutCreatedByInput
  functionContexts: FunctionContextCreateManyWithoutCreatedByInput
  graphs: GraphCreateManyWithoutCreatedByInput
  password: String!
  role: Role
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  displayName_ASC
  displayName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  displayName: String!
  email: String!
  password: String!
  role: Role!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  dashboards: DashboardUpdateManyWithoutCreatedByInput
  displayName: String
  email: String
  funcs: FuncUpdateManyWithoutCreatedByInput
  functionContexts: FunctionContextUpdateManyWithoutCreatedByInput
  graphs: GraphUpdateManyWithoutCreatedByInput
  lineGenerators: LineGeneratorUpdateManyWithoutCreatedByInput
  password: String
  role: Role
}

input UserUpdateManyMutationInput {
  displayName: String
  email: String
  password: String
  role: Role
}

input UserUpdateOneRequiredWithoutDashboardsInput {
  create: UserCreateWithoutDashboardsInput
  update: UserUpdateWithoutDashboardsDataInput
  upsert: UserUpsertWithoutDashboardsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutFunctionContextsInput {
  create: UserCreateWithoutFunctionContextsInput
  update: UserUpdateWithoutFunctionContextsDataInput
  upsert: UserUpsertWithoutFunctionContextsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutGraphsInput {
  create: UserCreateWithoutGraphsInput
  update: UserUpdateWithoutGraphsDataInput
  upsert: UserUpsertWithoutGraphsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLineGeneratorsInput {
  create: UserCreateWithoutLineGeneratorsInput
  update: UserUpdateWithoutLineGeneratorsDataInput
  upsert: UserUpsertWithoutLineGeneratorsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutFuncsInput {
  create: UserCreateWithoutFuncsInput
  update: UserUpdateWithoutFuncsDataInput
  upsert: UserUpsertWithoutFuncsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutDashboardsDataInput {
  displayName: String
  email: String
  funcs: FuncUpdateManyWithoutCreatedByInput
  functionContexts: FunctionContextUpdateManyWithoutCreatedByInput
  graphs: GraphUpdateManyWithoutCreatedByInput
  lineGenerators: LineGeneratorUpdateManyWithoutCreatedByInput
  password: String
  role: Role
}

input UserUpdateWithoutFuncsDataInput {
  dashboards: DashboardUpdateManyWithoutCreatedByInput
  displayName: String
  email: String
  functionContexts: FunctionContextUpdateManyWithoutCreatedByInput
  graphs: GraphUpdateManyWithoutCreatedByInput
  lineGenerators: LineGeneratorUpdateManyWithoutCreatedByInput
  password: String
  role: Role
}

input UserUpdateWithoutFunctionContextsDataInput {
  dashboards: DashboardUpdateManyWithoutCreatedByInput
  displayName: String
  email: String
  funcs: FuncUpdateManyWithoutCreatedByInput
  graphs: GraphUpdateManyWithoutCreatedByInput
  lineGenerators: LineGeneratorUpdateManyWithoutCreatedByInput
  password: String
  role: Role
}

input UserUpdateWithoutGraphsDataInput {
  dashboards: DashboardUpdateManyWithoutCreatedByInput
  displayName: String
  email: String
  funcs: FuncUpdateManyWithoutCreatedByInput
  functionContexts: FunctionContextUpdateManyWithoutCreatedByInput
  lineGenerators: LineGeneratorUpdateManyWithoutCreatedByInput
  password: String
  role: Role
}

input UserUpdateWithoutLineGeneratorsDataInput {
  dashboards: DashboardUpdateManyWithoutCreatedByInput
  displayName: String
  email: String
  funcs: FuncUpdateManyWithoutCreatedByInput
  functionContexts: FunctionContextUpdateManyWithoutCreatedByInput
  graphs: GraphUpdateManyWithoutCreatedByInput
  password: String
  role: Role
}

input UserUpsertWithoutDashboardsInput {
  update: UserUpdateWithoutDashboardsDataInput!
  create: UserCreateWithoutDashboardsInput!
}

input UserUpsertWithoutFuncsInput {
  update: UserUpdateWithoutFuncsDataInput!
  create: UserCreateWithoutFuncsInput!
}

input UserUpsertWithoutFunctionContextsInput {
  update: UserUpdateWithoutFunctionContextsDataInput!
  create: UserCreateWithoutFunctionContextsInput!
}

input UserUpsertWithoutGraphsInput {
  update: UserUpdateWithoutGraphsDataInput!
  create: UserCreateWithoutGraphsInput!
}

input UserUpsertWithoutLineGeneratorsInput {
  update: UserUpdateWithoutLineGeneratorsDataInput!
  create: UserCreateWithoutLineGeneratorsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  dashboards_every: DashboardWhereInput
  dashboards_some: DashboardWhereInput
  dashboards_none: DashboardWhereInput
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  funcs_every: FuncWhereInput
  funcs_some: FuncWhereInput
  funcs_none: FuncWhereInput
  functionContexts_every: FunctionContextWhereInput
  functionContexts_some: FunctionContextWhereInput
  functionContexts_none: FunctionContextWhereInput
  graphs_every: GraphWhereInput
  graphs_some: GraphWhereInput
  graphs_none: GraphWhereInput
  lineGenerators_every: LineGeneratorWhereInput
  lineGenerators_some: LineGeneratorWhereInput
  lineGenerators_none: LineGeneratorWhereInput
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    